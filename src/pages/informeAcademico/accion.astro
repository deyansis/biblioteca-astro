---
import Layout1 from "../../layouts/layout1.astro";
import { storeUser } from "../../store/user.store";
import type { IDocumento } from "./monografia.astro";

const {isAuth, user} = storeUser.getState()

if(!isAuth) return Astro.redirect("/login");


const URL_API = import.meta.env.URL_API;

const documentos: IDocumento[] = await fetch(
    `${URL_API}/documento/user/${user.id}/6`,
)
    .then((response) => {
        if (!response.ok) {
            console.error("Error en la solicitud");
        }
        return response.json();
    })
    .then((data) => {
        return data.data.documentos;
    })
    .catch((error) => {
        console.error("Error:", error);
        return null;
    });

function formatDate(dateString) {
    const date = new Date(dateString);
    const day = String(date.getDate()).padStart(2, "0");
    const month = String(date.getMonth() + 1).padStart(2, "0"); 
    const year = date.getFullYear();
    return `${day}-${month}-${year}`;
}

function getYear(dateString) {
    const date = new Date(dateString);
    return date.getFullYear();
}
---

<Layout1 title="Informes Estadísticos">
    <div class="container">
        <h1>Investigación de Acción</h1>
        <p>Explore nuestros documentos y visualice los informes de investigación de acción más recientes.</p>

        <!-- Filtros -->
        <div class="filters">
            <label for="filter-year">Año:</label>
            <select id="filter-year">
                <option value="all">Todos</option>
                <option value="2018">2018</option>
                <option value="2014">2014</option>
                <option value="2020">2020</option>
                <option value="2024">2024</option>
                <!-- Añadir más opciones de año según sea necesario -->
            </select>

            <label for="filter-career">Carrera:</label>
            <select id="filter-career">
                <option value="all">Todas</option>
                <option value="Derecho">Derecho</option>
                <option value="Medicina">Medicina</option>
                <option value="Educación">Educación</option>
                <!-- Añadir más opciones de carrera según sea necesario -->
            </select>
        </div>

        {
            documentos.map((doc) => {
                return (
                    <card-documento>
                        <div
                            class="document-item"
                            data-year={getYear(doc.year)}
                            data-career={doc.carrera_id}
                        >
                            <img
                                src="/imagenes/02.jpg"
                                alt="Portada del Documento 2"
                                class="document-cover"
                            />
                            <div
                                class="document-info"
                                data-base64={doc.archivo_base64}
                                data-namedoc={doc.nombre_archivo}
                            >
                                <h2>{`${doc.autor} - ${doc.nombre_archivo} - ${formatDate(doc.year)}`}</h2>
                                <button id="download-button" class="view-btn">
                                    Visualizar PDF
                                </button>
                            </div>
                        </div>
                    </card-documento>
                );
            })
        }
            <!-- Añadir más documentos aquí -->
        </div>
    </div>
</Layout1>

<script>
    class CardDocumento extends HTMLElement {
        constructor() {
            super();

            const documento_div = this.querySelector(".document-info");
            const documento_base64 = documento_div.getAttribute("data-base64");
            const nombre_archivo = documento_div.getAttribute("data-namedoc");

            const byteCharacters = atob(documento_base64);

            // Convierte los caracteres en bytes
            const byteNumbers = new Array(byteCharacters.length);
            for (let i = 0; i < byteCharacters.length; i++) {
                byteNumbers[i] = byteCharacters.charCodeAt(i);
            }

            const byteArray = new Uint8Array(byteNumbers);

            // Crea un objeto Blob a partir de los bytes
            const blob = new Blob([byteArray], { type: "application/pdf" });

            // Crea una URL de objeto para el Blob
            const blobUrl = URL.createObjectURL(blob);

            // Asigna la URL de descarga al enlace
            const downloadButton = this.querySelector("button");
            downloadButton.addEventListener("click", () => {
                const link = document.createElement("a");
                link.href = blobUrl;
                link.download = nombre_archivo;
                document.body.appendChild(link);
                link.click();
                document.body.removeChild(link);

                // Limpia la URL de objeto cuando ya no sea necesaria
                URL.revokeObjectURL(blobUrl);
            });
        }
    }

    customElements.define("card-documento", CardDocumento);
</script>

<script is:inline>
    document.addEventListener('DOMContentLoaded', function () {
        const filterYear = document.getElementById('filter-year');
        const filterCareer = document.getElementById('filter-career');
        const documents = document.querySelectorAll('.document-item');

        function filterDocuments() {
            const year = filterYear.value;
            const career = filterCareer.value;

            documents.forEach(document => {
                const documentYear = document.getAttribute('data-year');
                const documentCareer = document.getAttribute('data-career');

                const matchesYear = (year === 'all' || documentYear === year);
                const matchesCareer = (career === 'all' || documentCareer === career);

                if (matchesYear && matchesCareer) {
                    document.style.display = 'flex';
                } else {
                    document.style.display = 'none';
                }
            });
        }

        filterYear.addEventListener('change', filterDocuments);
        filterCareer.addEventListener('change', filterDocuments);
    });
</script>

<style>
    body {
        font-family: Arial, sans-serif;
        margin: 0;
        padding: 0;
        background-image: linear-gradient(to top right, #f8f8f8, #f9fbfd);
        background-position: center;
        background-size: cover;
        color: #0c0c0c;
        line-height: 1.6;
    }
    .container {
        max-width: 1000px;
        margin: 0px auto;
        padding: 100px;
        border-radius: 10px;
        box-shadow: 0 0 20px rgba(0, 0, 0, 0.1);
    }

    h1 {
        text-align: center;
        margin-bottom: 35px;
        background: linear-gradient(90deg, #1c3999e7,#1c3999e7);
        font-size: 3em;
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        animation: glow 1.5s infinite;
    }

    p {
        text-align: center;
        font-size: 1.5em;
        margin-bottom: 40px;
        color: rgb(0, 0, 0);
    }

    .filters {
        display: flex;
        justify-content: center;
        gap: 20px;
        margin-bottom: 40px;
    }

    .filters label {
        font-size: 1.5em;
        margin-right: 10px;
    }

    .filters select {
        padding: 5px;
        font-size: 1.5em;
    }

    .documents-list {
        display: flex;
        flex-direction: column;
        gap: 20px;
    }

    .document-item {
        display: flex;
        align-items: center;
        padding: 20px;
        background-image: linear-gradient(to top right, #a094e9e0, #81aff5);
        border-radius: 10px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        transition: transform 0.3s ease, box-shadow 0.3s ease;
        margin-bottom: 20px; /* Añadido para el espacio entre documentos */
    }

    .document-item:hover {
        transform: translateY(-5px);
        box-shadow: 0 0 15px rgba(0, 0, 0, 0.2);
    }

    .document-cover {
        max-width: 100px;
        height: auto;
        margin-right: 20px;
        border-radius: 5px;
    }

    .document-info {
        flex: 1;
    }

    .document-info h2 {
        margin: 0 0 10px;
        font-size: 1.3em;
        color: #020202;
        text-align: justify; /* Añadir justificación al texto */
    }

    .view-btn {
        display: inline-block;
        padding: 10px 20px;
        background-color: #5f4be2;
        color: #f5efef;
        text-decoration: none;
        border-radius: 5px;
        transition: background-color 0.3s ease;
    }

    .view-btn:hover {
        background-color: #4731d6;
    }
</style>
